import math
import random

class AlphaBetaPruning:
    def __init__(self, max_depth=5):
        self.max_depth = max_depth
        self.nodes_evaluated = 0
    
    def minimax(self, depth, node_index, maximizing_player, values, alpha, beta):
        self.nodes_evaluated += 1
        
        if depth == self.max_depth:
            return values[node_index]
        
        if maximizing_player:
            max_eval = -math.inf
            for i in range(2):
                eval = self.minimax(depth + 1, node_index * 2 + i, False, values, alpha, beta)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = math.inf
            for i in range(2):
                eval = self.minimax(depth + 1, node_index * 2 + i, True, values, alpha, beta)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

def basic_example():
    abp = AlphaBetaPruning(max_depth=3)
    values = [3, 5, 6, 9, 1, 2, 0, -1, 10, 12, 14, 15, 8, 7, 4, 3]
    print("Game Tree Values:", values)
    print("Max Depth:", abp.max_depth)
    result = abp.minimax(0, 0, True, values, -math.inf, math.inf)
    print(f"Optimal value: {result}")
    print(f"Nodes evaluated: {abp.nodes_evaluated}")

basic_example()
